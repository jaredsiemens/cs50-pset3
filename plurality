/*majority of code provided by cs50. only wrote vote function, print winner function and added
while loop to make sure all votes were valid */



#include <cs50.h>
#include <stdio.h>
#include <string.h>

// Max number of candidates
#define MAX 9

// Candidates have name and vote count
typedef struct
{
    string name;
    int votes;
}
candidate;

// Array of candidates
candidate candidates[MAX];

// Number of candidates
int candidate_count;

// Function prototypes
bool vote(string name);
void print_winner(void);

int main(int argc, string argv[])
{
    // Check for invalid usage
    if (argc < 2)
    {
        printf("Usage: plurality [candidate ...]\n");
        return 1;
    }

    // Populate array of candidates
    candidate_count = argc - 1;
    if (candidate_count > MAX)
    {
        printf("Maximum number of candidates is %i\n", MAX);
        return 2;
    }
    for (int i = 0; i < candidate_count; i++)
    {
        candidates[i].name = argv[i + 1];
        candidates[i].votes = 0;
    }

    int voter_count = get_int("Number of voters: ");

    // Loop over all voters
    for (int i = 0; i < voter_count; i++)
    {
        string name = get_string("Vote: ");


        //while string ensures valid votes
        while(!vote(name)) //if votes not valid..
        {
            printf("Invalid vote.\n"); //..warn and vote again
             name = get_string("Vote: ");
        }
    }

    // Display winner of election
    print_winner();
}

// Update vote totals given a new vote
bool vote(string name)
{
    for(int i = 0; i < candidate_count; i++){
        if(strcmp(candidates[i].name,name) == 0 ){
            candidates[i].votes++;
            return true;
        }
    }
    return false;
}

// Print the winner (or winners) of the election
void print_winner(void)
{
    //count max number or votes
    int maxVotes = candidates[0].votes;

    //for loop to iterated through and compare number of votes
    for(int i = 1; i < candidate_count; i++){ //set i to 1 since 0 is basecase
        if(candidates[i].votes > maxVotes){ //if candidates votes is bigger than current max..
            maxVotes = candidates[i].votes; //.. make current max votes = to candidates
        }
    }

    //compare votes
    for(int i = 0; i < candidate_count; i++){
        if(candidates[i].votes == maxVotes){ //if candidate votes match the max..
             printf("%s\n", candidates[i].name);  //.. print candidate
        }
    }
    return;
}

